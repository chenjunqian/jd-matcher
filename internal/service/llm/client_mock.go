// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source=client.go -destination=client_mock.go -package=llm
//

// Package llm is a generated GoMock package.
package llm

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockILLMClient is a mock of ILLMClient interface.
type MockILLMClient struct {
	ctrl     *gomock.Controller
	recorder *MockILLMClientMockRecorder
	isgomock struct{}
}

// MockILLMClientMockRecorder is the mock recorder for MockILLMClient.
type MockILLMClientMockRecorder struct {
	mock *MockILLMClient
}

// NewMockILLMClient creates a new mock instance.
func NewMockILLMClient(ctrl *gomock.Controller) *MockILLMClient {
	mock := &MockILLMClient{ctrl: ctrl}
	mock.recorder = &MockILLMClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILLMClient) EXPECT() *MockILLMClientMockRecorder {
	return m.recorder
}

// EmbeddingText mocks base method.
func (m *MockILLMClient) EmbeddingText(ctx context.Context, contents []string) ([][]float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmbeddingText", ctx, contents)
	ret0, _ := ret[0].([][]float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EmbeddingText indicates an expected call of EmbeddingText.
func (mr *MockILLMClientMockRecorder) EmbeddingText(ctx, contents any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmbeddingText", reflect.TypeOf((*MockILLMClient)(nil).EmbeddingText), ctx, contents)
}

// GenerateMatchJobByResumeResult mocks base method.
func (m *MockILLMClient) GenerateMatchJobByResumeResult(ctx context.Context, prompt string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateMatchJobByResumeResult", ctx, prompt)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateMatchJobByResumeResult indicates an expected call of GenerateMatchJobByResumeResult.
func (mr *MockILLMClientMockRecorder) GenerateMatchJobByResumeResult(ctx, prompt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateMatchJobByResumeResult", reflect.TypeOf((*MockILLMClient)(nil).GenerateMatchJobByResumeResult), ctx, prompt)
}

// GenerateResumeMatchPrompt mocks base method.
func (m *MockILLMClient) GenerateResumeMatchPrompt(ctx context.Context, promptTemp, resume, expectation, jobList string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateResumeMatchPrompt", ctx, promptTemp, resume, expectation, jobList)
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateResumeMatchPrompt indicates an expected call of GenerateResumeMatchPrompt.
func (mr *MockILLMClientMockRecorder) GenerateResumeMatchPrompt(ctx, promptTemp, resume, expectation, jobList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateResumeMatchPrompt", reflect.TypeOf((*MockILLMClient)(nil).GenerateResumeMatchPrompt), ctx, promptTemp, resume, expectation, jobList)
}

// GetJobMatchPromptTemplate mocks base method.
func (m *MockILLMClient) GetJobMatchPromptTemplate(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobMatchPromptTemplate", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobMatchPromptTemplate indicates an expected call of GetJobMatchPromptTemplate.
func (mr *MockILLMClientMockRecorder) GetJobMatchPromptTemplate(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobMatchPromptTemplate", reflect.TypeOf((*MockILLMClient)(nil).GetJobMatchPromptTemplate), ctx)
}
