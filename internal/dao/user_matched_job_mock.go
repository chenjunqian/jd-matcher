// Code generated by MockGen. DO NOT EDIT.
// Source: user_matched_job.go
//
// Generated by this command:
//
//	mockgen -source=user_matched_job.go -destination=user_matched_job_mock.go -package=dao
//

// Package dao is a generated GoMock package.
package dao

import (
	context "context"
	dto "jd-matcher/internal/model/dto"
	entity "jd-matcher/internal/model/entity"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIUserMatchedJob is a mock of IUserMatchedJob interface.
type MockIUserMatchedJob struct {
	ctrl     *gomock.Controller
	recorder *MockIUserMatchedJobMockRecorder
	isgomock struct{}
}

// MockIUserMatchedJobMockRecorder is the mock recorder for MockIUserMatchedJob.
type MockIUserMatchedJobMockRecorder struct {
	mock *MockIUserMatchedJob
}

// NewMockIUserMatchedJob creates a new mock instance.
func NewMockIUserMatchedJob(ctrl *gomock.Controller) *MockIUserMatchedJob {
	mock := &MockIUserMatchedJob{ctrl: ctrl}
	mock.recorder = &MockIUserMatchedJobMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserMatchedJob) EXPECT() *MockIUserMatchedJobMockRecorder {
	return m.recorder
}

// CreateMatchJobIfNotExist mocks base method.
func (m *MockIUserMatchedJob) CreateMatchJobIfNotExist(ctx context.Context, matchedJobs []entity.UserMatchedJob) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMatchJobIfNotExist", ctx, matchedJobs)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMatchJobIfNotExist indicates an expected call of CreateMatchJobIfNotExist.
func (mr *MockIUserMatchedJobMockRecorder) CreateMatchJobIfNotExist(ctx, matchedJobs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMatchJobIfNotExist", reflect.TypeOf((*MockIUserMatchedJob)(nil).CreateMatchJobIfNotExist), ctx, matchedJobs)
}

// GetUserMatchedJobDetailList mocks base method.
func (m *MockIUserMatchedJob) GetUserMatchedJobDetailList(ctx context.Context, userId string, offset, limit int) ([]dto.UserMatchedDetailJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserMatchedJobDetailList", ctx, userId, offset, limit)
	ret0, _ := ret[0].([]dto.UserMatchedDetailJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserMatchedJobDetailList indicates an expected call of GetUserMatchedJobDetailList.
func (mr *MockIUserMatchedJobMockRecorder) GetUserMatchedJobDetailList(ctx, userId, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserMatchedJobDetailList", reflect.TypeOf((*MockIUserMatchedJob)(nil).GetUserMatchedJobDetailList), ctx, userId, offset, limit)
}

// GetUserMatchedJobDetailListTotalCount mocks base method.
func (m *MockIUserMatchedJob) GetUserMatchedJobDetailListTotalCount(ctx context.Context, userId string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserMatchedJobDetailListTotalCount", ctx, userId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserMatchedJobDetailListTotalCount indicates an expected call of GetUserMatchedJobDetailListTotalCount.
func (mr *MockIUserMatchedJobMockRecorder) GetUserMatchedJobDetailListTotalCount(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserMatchedJobDetailListTotalCount", reflect.TypeOf((*MockIUserMatchedJob)(nil).GetUserMatchedJobDetailListTotalCount), ctx, userId)
}

// GetUserNonNotifiedJobList mocks base method.
func (m *MockIUserMatchedJob) GetUserNonNotifiedJobList(ctx context.Context, userId string, offset, limit int) ([]dto.UserMatchedDetailJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserNonNotifiedJobList", ctx, userId, offset, limit)
	ret0, _ := ret[0].([]dto.UserMatchedDetailJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserNonNotifiedJobList indicates an expected call of GetUserNonNotifiedJobList.
func (mr *MockIUserMatchedJobMockRecorder) GetUserNonNotifiedJobList(ctx, userId, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserNonNotifiedJobList", reflect.TypeOf((*MockIUserMatchedJob)(nil).GetUserNonNotifiedJobList), ctx, userId, offset, limit)
}

// GetUserNonNotifiedJobTotalCount mocks base method.
func (m *MockIUserMatchedJob) GetUserNonNotifiedJobTotalCount(ctx context.Context, userId string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserNonNotifiedJobTotalCount", ctx, userId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserNonNotifiedJobTotalCount indicates an expected call of GetUserNonNotifiedJobTotalCount.
func (mr *MockIUserMatchedJobMockRecorder) GetUserNonNotifiedJobTotalCount(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserNonNotifiedJobTotalCount", reflect.TypeOf((*MockIUserMatchedJob)(nil).GetUserNonNotifiedJobTotalCount), ctx, userId)
}

// UpdateAllMatchJobNotified mocks base method.
func (m *MockIUserMatchedJob) UpdateAllMatchJobNotified(ctx context.Context, userId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllMatchJobNotified", ctx, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAllMatchJobNotified indicates an expected call of UpdateAllMatchJobNotified.
func (mr *MockIUserMatchedJobMockRecorder) UpdateAllMatchJobNotified(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllMatchJobNotified", reflect.TypeOf((*MockIUserMatchedJob)(nil).UpdateAllMatchJobNotified), ctx, userId)
}
