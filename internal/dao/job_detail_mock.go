// Code generated by MockGen. DO NOT EDIT.
// Source: job_detail.go
//
// Generated by this command:
//
//	mockgen -source=job_detail.go -destination=mock_job_detail.go
//

// Package mock_dao is a generated GoMock package.
package dao

import (
	context "context"
	entity "jd-matcher/internal/model/entity"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIJobDetail is a mock of IJobDetail interface.
type MockIJobDetail struct {
	ctrl     *gomock.Controller
	recorder *MockIJobDetailMockRecorder
	isgomock struct{}
}

// MockIJobDetailMockRecorder is the mock recorder for MockIJobDetail.
type MockIJobDetailMockRecorder struct {
	mock *MockIJobDetail
}

// NewMockIJobDetail creates a new mock instance.
func NewMockIJobDetail(ctrl *gomock.Controller) *MockIJobDetail {
	mock := &MockIJobDetail{ctrl: ctrl}
	mock.recorder = &MockIJobDetailMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIJobDetail) EXPECT() *MockIJobDetailMockRecorder {
	return m.recorder
}

// CreateJobDetailIfNotExist mocks base method.
func (m *MockIJobDetail) CreateJobDetailIfNotExist(ctx context.Context, jobDetails []entity.JobDetail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJobDetailIfNotExist", ctx, jobDetails)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateJobDetailIfNotExist indicates an expected call of CreateJobDetailIfNotExist.
func (mr *MockIJobDetailMockRecorder) CreateJobDetailIfNotExist(ctx, jobDetails any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobDetailIfNotExist", reflect.TypeOf((*MockIJobDetail)(nil).CreateJobDetailIfNotExist), ctx, jobDetails)
}

// GetEmptyJobDescEmbeddingJobDetailTotalCount mocks base method.
func (m *MockIJobDetail) GetEmptyJobDescEmbeddingJobDetailTotalCount(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmptyJobDescEmbeddingJobDetailTotalCount", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmptyJobDescEmbeddingJobDetailTotalCount indicates an expected call of GetEmptyJobDescEmbeddingJobDetailTotalCount.
func (mr *MockIJobDetailMockRecorder) GetEmptyJobDescEmbeddingJobDetailTotalCount(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmptyJobDescEmbeddingJobDetailTotalCount", reflect.TypeOf((*MockIJobDetail)(nil).GetEmptyJobDescEmbeddingJobDetailTotalCount), ctx)
}

// GetEmptyJobDescEmbeddingJobList mocks base method.
func (m *MockIJobDetail) GetEmptyJobDescEmbeddingJobList(ctx context.Context, offset, limit int) ([]entity.JobDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmptyJobDescEmbeddingJobList", ctx, offset, limit)
	ret0, _ := ret[0].([]entity.JobDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmptyJobDescEmbeddingJobList indicates an expected call of GetEmptyJobDescEmbeddingJobList.
func (mr *MockIJobDetailMockRecorder) GetEmptyJobDescEmbeddingJobList(ctx, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmptyJobDescEmbeddingJobList", reflect.TypeOf((*MockIJobDetail)(nil).GetEmptyJobDescEmbeddingJobList), ctx, offset, limit)
}

// GetJobDetailById mocks base method.
func (m *MockIJobDetail) GetJobDetailById(ctx context.Context, id string) (entity.JobDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobDetailById", ctx, id)
	ret0, _ := ret[0].(entity.JobDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobDetailById indicates an expected call of GetJobDetailById.
func (mr *MockIJobDetailMockRecorder) GetJobDetailById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobDetailById", reflect.TypeOf((*MockIJobDetail)(nil).GetJobDetailById), ctx, id)
}

// GetLatestJobList mocks base method.
func (m *MockIJobDetail) GetLatestJobList(ctx context.Context, offset, limit int) ([]entity.JobDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestJobList", ctx, offset, limit)
	ret0, _ := ret[0].([]entity.JobDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestJobList indicates an expected call of GetLatestJobList.
func (mr *MockIJobDetailMockRecorder) GetLatestJobList(ctx, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestJobList", reflect.TypeOf((*MockIJobDetail)(nil).GetLatestJobList), ctx, offset, limit)
}

// QueryJobDetailByEmbedding mocks base method.
func (m *MockIJobDetail) QueryJobDetailByEmbedding(ctx context.Context, beforeDate string, embedding []float32) ([]entity.JobDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryJobDetailByEmbedding", ctx, beforeDate, embedding)
	ret0, _ := ret[0].([]entity.JobDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryJobDetailByEmbedding indicates an expected call of QueryJobDetailByEmbedding.
func (mr *MockIJobDetailMockRecorder) QueryJobDetailByEmbedding(ctx, beforeDate, embedding any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryJobDetailByEmbedding", reflect.TypeOf((*MockIJobDetail)(nil).QueryJobDetailByEmbedding), ctx, beforeDate, embedding)
}

// QueryNonNotifiedJobDetailByEmbedding mocks base method.
func (m *MockIJobDetail) QueryNonNotifiedJobDetailByEmbedding(ctx context.Context, beforeDate string, embedding []float32) ([]entity.JobDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryNonNotifiedJobDetailByEmbedding", ctx, beforeDate, embedding)
	ret0, _ := ret[0].([]entity.JobDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryNonNotifiedJobDetailByEmbedding indicates an expected call of QueryNonNotifiedJobDetailByEmbedding.
func (mr *MockIJobDetailMockRecorder) QueryNonNotifiedJobDetailByEmbedding(ctx, beforeDate, embedding any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryNonNotifiedJobDetailByEmbedding", reflect.TypeOf((*MockIJobDetail)(nil).QueryNonNotifiedJobDetailByEmbedding), ctx, beforeDate, embedding)
}

// UpdateJobDetailEmbedding mocks base method.
func (m *MockIJobDetail) UpdateJobDetailEmbedding(ctx context.Context, entity entity.JobDetail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobDetailEmbedding", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateJobDetailEmbedding indicates an expected call of UpdateJobDetailEmbedding.
func (mr *MockIJobDetailMockRecorder) UpdateJobDetailEmbedding(ctx, entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobDetailEmbedding", reflect.TypeOf((*MockIJobDetail)(nil).UpdateJobDetailEmbedding), ctx, entity)
}
