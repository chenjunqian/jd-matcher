// =================================================================================
// This is auto-generated by GoFrame CLI tool only once. Fill this file as you wish.
// =================================================================================

package dao

import (
	"context"
	"jd-matcher/internal/dao/internal"
	"jd-matcher/internal/model/entity"

	"github.com/gogf/gf/v2/frame/g"
	"github.com/gogf/gf/v2/util/guid"
	"github.com/pgvector/pgvector-go"
)

// internalUserInfoDao is internal type for wrapping internal DAO implements.
type internalUserInfoDao = *internal.UserInfoDao

// userInfoDao is the data access object for table user_info.
// You can define custom methods on it to extend its functionality as you wish.
type userInfoDao struct {
	internalUserInfoDao
}

var (
	// UserInfo is globally public accessible object for table user_info operations.
	UserInfo = userInfoDao{
		internal.NewUserInfoDao(),
	}
)

// Fill with you ideas below.
func CreateUserInfoIfNotExist(ctx context.Context, userInfo entity.UserInfo) (err error) {
	var existUserInfo entity.UserInfo
	err = UserInfo.Ctx(ctx).Where("telegram_id = ?", userInfo.TelegramId).Scan(&existUserInfo)

	if existUserInfo.Id != "" {
		g.Log().Line().Debugf(ctx, "user %s exist, update user info", userInfo.Name)
		_, err = UserInfo.Ctx(ctx).Save(userInfo)
		return nil
	}

	userInfo.Id = guid.S()
	_, err = UserInfo.Ctx(ctx).Insert(userInfo)

	return
}

func GetUserInfoByTelegramId(ctx context.Context, telegramId string) (result entity.UserInfo, err error) {
	err = UserInfo.Ctx(ctx).Where("telegram_id = ?", telegramId).Scan(&result)
	return
}

func IsUserHasUploadResume(ctx context.Context, telegramId string) (result bool, err error) {
	result, err = UserInfo.Ctx(ctx).Where("telegram_id = ?", telegramId).Where("resume is not null").Exist()
	return
}

func UpdateUserResume(ctx context.Context, telegramId string, resume string, resumeEmbedding []float32) (err error) {
	_, err = UserInfo.Ctx(ctx).Data(g.Map{"resume": resume, "resume_embedding": pgvector.NewVector(resumeEmbedding)}).Where("telegram_id = ?", telegramId).Update()
	return
}

func GetUserInfoCount(ctx context.Context) (count int, err error) {
	count, err = UserInfo.Ctx(ctx).Where("resume is not null and resume_embedding is not null").Count()
	return
}

func GetUserInfoList(ctx context.Context, offset, limit int) (result []entity.UserInfo, err error) {
	err = UserInfo.Ctx(ctx).Where("resume is not null and resume_embedding is not null").Limit(limit).Offset(offset).Scan(&result)
	return
}
